name: BuildAndTest

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.[ch]'
      - '**/*.[ch]pp'
      - '**/*.[ch]xx'
      - '**/CMakeLists.txt'
      - '**/*.cmake'
      - 'DOCKER_VERSION'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.[ch]'
      - '**/*.[ch]pp'
      - '**/*.[ch]xx'
      - '**/CMakeLists.txt'
      - '**/*.cmake'
      - 'DOCKER_VERSION'

jobs:
  get-docker-version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.read.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - id: read
        run: echo "tag=$(cat DOCKER_VERSION)" >> $GITHUB_OUTPUT

  format-check:
    runs-on: ubuntu-latest
    needs: get-docker-version
    container:
      image: ghcr.io/zofikardev/waffle-dev:${{ needs.get-docker-version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run clang-format check
        run: |
          FILES=$(find Libs src -type f \( -name '*.cpp' -o -name '*.h' \))
          if [ -n "$FILES" ]; then
            clang-format --dry-run --Werror $FILES
          fi

  build-and-test:
    runs-on: ubuntu-latest
    needs: [ get-docker-version, format-check ]
    container:
      image: ghcr.io/zofikardev/waffle-dev:${{ needs.get-docker-version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure
        run: cmake -S . -B build -G Ninja

      - name: Build
        run: cmake --build build -j

      - name: Run tests
        run: ctest --test-dir build