name: BuildAndTest

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.c'
      - '**/*.cc'
      - '**/*.cpp'
      - '**/*.cxx'
      - '**/*.h'
      - '**/*.hpp'
      - '**/*.hxx'
      - '**/CMakeLists.txt'
      - '**/*.cmake'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.c'
      - '**/*.cc'
      - '**/*.cpp'
      - '**/*.cxx'
      - '**/*.h'
      - '**/*.hpp'
      - '**/*.hxx'
      - '**/CMakeLists.txt'
      - '**/*.cmake'

jobs:
  format-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install clang-format
        run: sudo apt-get install -y clang-format

      - name: Run clang-format check
        run: |
          FILES=$(find . -regex '.*\.\(cpp\|cc\|cxx\|c\|hpp\|hxx\|h\)$')
          if [ -n "$FILES" ]; then
            clang-format --dry-run --Werror $FILES
          fi

  build-and-test:
    runs-on: ${{ matrix.os }}
    needs: format-check   # ðŸ‘ˆ ensures this only runs if format-check passed

    strategy:
      matrix:
        os: [ubuntu-latest]      # later: [ubuntu-latest, windows-latest, macos-latest]
        build-type: [Release]    # later: [Debug, Release]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure CMake
        run: cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}

      - name: Build
        run: cmake --build build --config ${{ matrix.build-type }} -j 4

      - name: Run Tests
        run: ctest --test-dir build --output-on-failure --build-config ${{ matrix.build-type }}
